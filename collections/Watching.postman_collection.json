{
	"info": {
		"_postman_id": "854872c1-3333-413c-9de4-dd5f87f1c642",
		"name": "Watching",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17535481"
	},
	"item": [
		{
			"name": "Add a watching",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"{{user_id}}\",\n    \"showId\": \"{{show_id}}\",\n    \"season\": 1,\n    \"episode\": 1,\n    \"lastSeen\": \"15/11/2023\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/watching",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"watching"
					]
				}
			},
			"response": [
				{
					"name": "Add a watching",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{user_id}}\",\n    \"showId\": \"{{show_id}}\",\n    \"season\": 1,\n    \"episode\": 1,\n    \"lastSeen\": \"2023-11-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/watching",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"watching"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"userId\": \"b0117050-ae52-44f4-94e9-871e7110b040\",\n    \"showId\": \"8971c2a3-ee05-4e7b-a60b-492d695f7de7\",\n    \"season\": 1,\n    \"episode\": 1,\n    \"lastSeen\": \"15/11/2023\"\n}"
				}
			]
		},
		{
			"name": "Get all watchings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of watchings > ' + 0, function () {",
							"    var data = pm.response.json()",
							"    pm.expect(data.length).to.greaterThan(0)",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/watching",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"watching"
					]
				}
			},
			"response": [
				{
					"name": "Get all watchings",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/watching",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"watching"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"userId\": \"929562b7-a7d9-4f64-8d8d-5837379eddba\",\n        \"showId\": \"a10445c5-ca2a-4a70-b94e-38ac4f3ca4ad\",\n        \"season\": 1,\n        \"episode\": 1,\n        \"lastSeen\": \"15/11/2023\",\n        \"user\": {\n            \"id\": \"929562b7-a7d9-4f64-8d8d-5837379eddba\",\n            \"name\": \"Laura Restrepo\",\n            \"email\": \"l.restrepop@uniandes.edu.co\",\n            \"password\": \"Tommy2013\"\n        },\n        \"show\": {\n            \"id\": \"a10445c5-ca2a-4a70-b94e-38ac4f3ca4ad\",\n            \"name\": \"Jujutsu Kaisen\",\n            \"poster\": \"https://m.media-amazon.com/images/M/MV5BMTMwMDM4N2EtOTJiYy00OTQ0LThlZDYtYWUwOWFlY2IxZGVjXkEyXkFqcGdeQXVyNjAwNDUxODI@._V1_FMjpg_UX1000_.jpg\"\n        }\n    },\n    {\n        \"userId\": \"6c54ece8-8413-11ee-b962-0242ac120002\",\n        \"showId\": \"a10445c5-ca2a-4a70-b94e-38ac4f3ca4ad\",\n        \"season\": 1,\n        \"episode\": 1,\n        \"lastSeen\": \"15/11/2023\",\n        \"user\": {\n            \"id\": \"6c54ece8-8413-11ee-b962-0242ac120002\",\n            \"name\": \"Isabela Martinez\",\n            \"email\": \"l.martinezg@uniandes.edu.co\",\n            \"password\": \"Pepe2020\"\n        },\n        \"show\": {\n            \"id\": \"a10445c5-ca2a-4a70-b94e-38ac4f3ca4ad\",\n            \"name\": \"Attack on Titan\",\n            \"poster\": \"https://m.media-amazon.com/images/M/MV5BNDFjYTIxMjctYTQ2ZC00OGQ4LWE3OGYtNDdiMzNiNDZlMDAwXkEyXkFqcGdeQXVyNzI3NjY3NjQ@._V1_FMjpg_UX1000_.jpg\"\n        }\n    }\n]"
				}
			]
		},
		{
			"name": "Get one watching",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/watching/{{user_id}}/{{show_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"watching",
						"{{user_id}}",
						"{{show_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get one watching",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/watching/{{user_id}}/{{show_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"watching",
								"{{user_id}}",
								"{{show_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"userId\": \"929562b7-a7d9-4f64-8d8d-5837379eddba\",\n    \"showId\": \"a10445c5-ca2a-4a70-b94e-38ac4f3ca4ad\",\n    \"season\": 1,\n    \"episode\": 1,\n    \"lastSeen\": \"15/11/2023\",\n    \"user\": {\n        \"id\": \"929562b7-a7d9-4f64-8d8d-5837379eddba\",\n        \"name\": \"Laura Restrepo\",\n        \"email\": \"l.restrepop@uniandes.edu.co\",\n        \"password\": \"Tommy2013\"\n    },\n    \"show\": {\n        \"id\": \"a10445c5-ca2a-4a70-b94e-38ac4f3ca4ad\",\n        \"name\": \"Jujutsu Kaisen\",\n        \"poster\": \"https://m.media-amazon.com/images/M/MV5BMTMwMDM4N2EtOTJiYy00OTQ0LThlZDYtYWUwOWFlY2IxZGVjXkEyXkFqcGdeQXVyNjAwNDUxODI@._V1_FMjpg_UX1000_.jpg\"\n    }\n}"
				}
			]
		},
		{
			"name": "Get an invalid watching",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The watching with the given user and show ids was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/watching/{{invalid_id}}/{{invalid_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"watching",
						"{{invalid_id}}",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get an invalid watching",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/watching/{{invalid_id}}/{{invalid_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"watching",
								"{{invalid_id}}",
								"{{invalid_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The watching with the given user and show ids was not found\"\n}"
				}
			]
		},
		{
			"name": "Update a watching",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"{{user_id}}\",\n    \"showId\": \"{{show_id}}\",\n    \"season\": 1,\n    \"episode\": 2,\n    \"lastSeen\": \"15/11/2023\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/watching/{{user_id}}/{{show_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"watching",
						"{{user_id}}",
						"{{show_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Update a watching",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{user_id}}\",\n    \"showId\": \"{{show_id}}\",\n    \"season\": 1,\n    \"episode\": 2,\n    \"lastSeen\": \"2023-11-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/watching/{{user_id}}/{{show_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"watching",
								"{{user_id}}",
								"{{show_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"userId\": \"a3ed4a72-5816-4cec-b800-f68c4a5f5a1e\",\n    \"showId\": \"8093ea0b-8054-4838-a7d2-ad5b4df21991\",\n    \"season\": 1,\n    \"episode\": 2,\n    \"lastSeen\": \"15/11/2023\"\n}"
				}
			]
		},
		{
			"name": "Update an invalid watching",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data.message).to.eql(\"The watching with the given user and show ids was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"{{invalid_id}}\",\n    \"showId\": \"{{invalid_id}}\",\n    \"season\": 1,\n    \"episode\": 2,\n    \"lastSeen\": \"15/11/2023\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/watching/{{invalid_id}}/{{invalid_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"watching",
						"{{invalid_id}}",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Update an invalid watching",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{invalid_id}}\",\n    \"showId\": \"{{invalid_id}}\",\n    \"season\": 1,\n    \"episode\": 2,\n    \"lastSeen\": \"2023-11-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/watching/{{invalid_id}}/{{invalid_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"watching",
								"{{invalid_id}}",
								"{{invalid_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The watching with the given user and show ids was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a watching",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/watching/{{user_id}}/{{show_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"watching",
						"{{user_id}}",
						"{{show_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a watching",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/watching/{{user_id}}/{{show_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"watching",
								"{{user_id}}",
								"{{show_id}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete an invalid watching",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"    var data = pm.response.json();",
							"    pm.expect(data.message).to.eql(\"The watching with the given user and show ids was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/watching/{{invalid_id}}/{{invalid_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"watching",
						"{{invalid_id}}",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete an invalid watching",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/watching/{{invalid_id}}/{{invalid_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"watching",
								"{{invalid_id}}",
								"{{invalid_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The watching with the given user and show ids was not found\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "invalid_id",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		}
	]
}
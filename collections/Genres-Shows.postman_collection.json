{
	"info": {
		"_postman_id": "48b29236-e250-4c0a-817f-d43b9f497651",
		"name": "Genres-Shows",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17535481"
	},
	"item": [
		{
			"name": "Add a genre to a show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{genre_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{show_id}}",
						"genres",
						"{{genre_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Add a genre to a show",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{genre_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{show_id}}",
								"genres",
								"{{genre_id}}"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"e38cf8c1-a36f-4a11-ac59-503e60d8cc2e\",\n    \"name\": \"Jujutsu Kaisen\",\n    \"poster\": \"https://m.media-amazon.com/images/M/MV5BMTMwMDM4N2EtOTJiYy00OTQ0LThlZDYtYWUwOWFlY2IxZGVjXkEyXkFqcGdeQXVyNjAwNDUxODI@._V1_FMjpg_UX1000_.jpg\",\n    \"genres\": [\n        {\n            \"id\": \"e9427119-d1d7-4315-b0c5-044a13e4ebfc\",\n            \"nameEN\": \"Drama\",\n            \"nameES\": \"Drama\",\n            \"nameFR\": \"Drame\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Add an invalid genre to a show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The genre with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{invalid_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{show_id}}",
						"genres",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Add an invalid genre to a show",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{show_id}}/genres/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{show_id}}",
								"genres",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The genre with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Add a genre to an invalid show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The show with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{invalid_id}}/genres/{{genre_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{invalid_id}}",
						"genres",
						"{{genre_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Add a genre to an invalid show",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{invalid_id}}/genres/{{genre_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{invalid_id}}",
								"genres",
								"{{genre_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The show with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get a genre of a show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{genre_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{show_id}}",
						"genres",
						"{{genre_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a genre of a show",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{genre_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{show_id}}",
								"genres",
								"{{genre_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"e9427119-d1d7-4315-b0c5-044a13e4ebfc\",\n    \"nameEN\": \"Drama\",\n    \"nameES\": \"Drama\",\n    \"nameFR\": \"Drame\"\n}"
				}
			]
		},
		{
			"name": "Get a genre of an invalid show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The show with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{invalid_id}}/genres/{{genre_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{invalid_id}}",
						"genres",
						"{{genre_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a genre of an invalid show",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{invalid_id}}/genres/{{genre_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{invalid_id}}",
								"genres",
								"{{genre_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The show with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get an invalid genre of a show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The genre with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{invalid_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{show_id}}",
						"genres",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get an invalid genre of a show",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{invalid_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{show_id}}",
								"genres",
								"{{invalid_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The genre with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get a genre non-associated to a show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The genre with the given id is not associated to the show\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{genre_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{show_id}}",
						"genres",
						"{{genre_id_2}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a genre non-associated to a show",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{genre_id_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{show_id}}",
								"genres",
								"{{genre_id_2}}"
							]
						}
					},
					"status": "Precondition Failed",
					"code": 412,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The genre with the given id is not associated to the show\"\n}"
				}
			]
		},
		{
			"name": "Get all genres of a show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{show_id}}/genres",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{show_id}}",
						"genres"
					]
				}
			},
			"response": [
				{
					"name": "Get all genres of a show",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{show_id}}/genres",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{show_id}}",
								"genres"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": \"e9427119-d1d7-4315-b0c5-044a13e4ebfc\",\n        \"nameEN\": \"Drama\",\n        \"nameES\": \"Drama\",\n        \"nameFR\": \"Drame\"\n    }\n]"
				}
			]
		},
		{
			"name": "Get all genres of an invalid show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The show with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{invalid_id}}/genres",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{invalid_id}}",
						"genres"
					]
				}
			},
			"response": [
				{
					"name": "Get all genres of an invalid show",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{invalid_id}}/genres",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{invalid_id}}",
								"genres"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The show with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Update genres of a show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n   {\n        \"id\": \"{{genre_id}}\",\n        \"nameEN\": \"Comedy\",\n        \"nameES\": \"Comedia\",\n        \"nameFR\": \"Comédie\"\n   }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/shows/{{show_id}}/genres",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{show_id}}",
						"genres"
					]
				}
			},
			"response": [
				{
					"name": "Update genres of a show",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{show_id}}/genres",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{show_id}}",
								"genres"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"e38cf8c1-a36f-4a11-ac59-503e60d8cc2e\",\n    \"name\": \"Jujutsu Kaisen\",\n    \"poster\": \"https://m.media-amazon.com/images/M/MV5BMTMwMDM4N2EtOTJiYy00OTQ0LThlZDYtYWUwOWFlY2IxZGVjXkEyXkFqcGdeQXVyNjAwNDUxODI@._V1_FMjpg_UX1000_.jpg\",\n    \"genres\": [\n        {\n            \"id\": \"e9427119-d1d7-4315-b0c5-044a13e4ebfc\",\n            \"nameEN\": \"Comedy\",\n            \"nameES\": \"Comedia\",\n            \"nameFR\": \"Comédie\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Update invalid genres of a show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The genre with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n   {\n       \"id\": \"{{invalid_id}}\"\n   }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/shows/{{show_id}}/genres",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{show_id}}",
						"genres"
					]
				}
			},
			"response": [
				{
					"name": "Update invalid genres of a show",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n   {\n       \"id\": \"{{invalid_id}}\"\n   }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/shows/{{show_id}}/genres",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{show_id}}",
								"genres"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The genre with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Update genres of an invalid show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The show with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{invalid_id}}/genres",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{invalid_id}}",
						"genres"
					]
				}
			},
			"response": [
				{
					"name": "Update genres of an invalid show",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{invalid_id}}/genres",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{invalid_id}}",
								"genres"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The show with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a genre of a show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{genre_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{show_id}}",
						"genres",
						"{{genre_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a genre of a show",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{genre_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{show_id}}",
								"genres",
								"{{genre_id}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete a genre of an invalid show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The show with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{invalid_id}}/genres/{{genre_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{invalid_id}}",
						"genres",
						"{{genre_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a genre of an invalid show",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{invalid_id}}/genres/{{genre_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{invalid_id}}",
								"genres",
								"{{genre_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The show with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete an invalid genre of a show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The genre with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{invalid_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{show_id}}",
						"genres",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete an invalid genre of a show",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{invalid_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{show_id}}",
								"genres",
								"{{invalid_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The genre with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a genre non-associated to a show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The genre with the given id is not associated to the show\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{genre_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"shows",
						"{{show_id}}",
						"genres",
						"{{genre_id_2}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a genre non-associated to a show",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/shows/{{show_id}}/genres/{{genre_id_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"shows",
								"{{show_id}}",
								"genres",
								"{{genre_id_2}}"
							]
						}
					},
					"status": "Precondition Failed",
					"code": 412,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The genre with the given id is not associated to the show\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "invalid_id",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		},
		{
			"key": "genre_id_2",
			"value": "0d1aa973-c906-4ce5-9de7-9c4324bc5c46",
			"type": "string"
		}
	]
}
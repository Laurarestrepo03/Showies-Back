{
	"info": {
		"_postman_id": "0943c882-282a-47bb-aa45-72a13e7104c1",
		"name": "Shows-Genres",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17535481"
	},
	"item": [
		{
			"name": "Add a show to a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{show_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genre_id}}",
						"shows",
						"{{show_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Add a show to a genre",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{show_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{genre_id}}",
								"shows",
								"{{show_id}}"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": {{show_id_1}},\n    \"nameEN\": \"Drama\",\n    \"nameES\": \"Drama\",\n    \"nameFR\": \"Drame\",\n    \"shows\": [\n        {\n            \"id\": \"50ac4670-a3cd-4d8b-b28f-fa0d3a587f73\",\n            \"name\": \"Jujutsu Kaisen\",\n            \"poster\": \"https://m.media-amazon.com/images/M/MV5BMTMwMDM4N2EtOTJiYy00OTQ0LThlZDYtYWUwOWFlY2IxZGVjXkEyXkFqcGdeQXVyNjAwNDUxODI@._V1_FMjpg_UX1000_.jpg\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Add an invalid show to a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The show with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{invalid_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genre_id}}",
						"shows",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Add an invalid show to a genre",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{genre_id}}",
								"shows",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The show with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Add a show to an invalid genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The genre with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{invalid_id}}/shows/{{show_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{invalid_id}}",
						"shows",
						"{{show_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Add a show to an invalid genre",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{invalid_id}}}/shows/{{show_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{invalid_id}}}",
								"shows",
								"{{show_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The genre with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get a show of a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{show_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genre_id}}",
						"shows",
						"{{show_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a show of a genre",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{show_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{genre_id}}",
								"shows",
								"{{show_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\":{{show_id_1}},\n    \"name\": \"Jujustsu Kaisen\",\n    \"poster\": \"https://m.media-amazon.com/images/M/MV5BMTMwMDM4N2EtOTJiYy00OTQ0LThlZDYtYWUwOWFlY2IxZGVjXkEyXkFqcGdeQXVyNjAwNDUxODI@._V1_FMjpg_UX1000_.jpg\"\n}"
				}
			]
		},
		{
			"name": "Get a show of an invalid genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The genre with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{invalid_id}}/shows/{{show_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{invalid_id}}",
						"shows",
						"{{show_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a show of an invalid genre",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{invalid_id}}/shows/{{show_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{invalid_id}}",
								"shows",
								"{{show_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The genre with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get an invalid show of a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The show with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{invalid_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genre_id}}",
						"shows",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get an invalid show of a genre",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{invalid_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{genre_id}}",
								"shows",
								"{{invalid_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The show with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get a show non-associated to a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The show with the given id is not associated to the genre\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{show_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genre_id}}",
						"shows",
						"{{show_id_2}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a show non-associated to a genre",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{show_id_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{genre_id}}",
								"shows",
								"{{show_id_2}}"
							]
						}
					},
					"status": "Precondition Failed",
					"code": 412,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The show with the given id is not associated to the genre\"\n}"
				}
			]
		},
		{
			"name": "Get all shows of a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{genre_id}}/shows",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genre_id}}",
						"shows"
					]
				}
			},
			"response": [
				{
					"name": "Get all shows of a genre",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{genre_id}}/shows",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{genre_id}}",
								"shows"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "[\n    {\n    \"id\": {{show_id_1}},\n    \"name\": \"Jujutsu Kaisen\",\n    \"poster\": \"https://m.media-amazon.com/images/M/MV5BMTMwMDM4N2EtOTJiYy00OTQ0LThlZDYtYWUwOWFlY2IxZGVjXkEyXkFqcGdeQXVyNjAwNDUxODI@._V1_FMjpg_UX1000_.jpg\"\n    }\n]"
				}
			]
		},
		{
			"name": "Get all shows of an invalid genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The genre with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{invalid_id}}/shows",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{invalid_id}}",
						"shows"
					]
				}
			},
			"response": [
				{
					"name": "Get all shows of an invalid genre",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{invalid_id}}/shows",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{invalid_id}}",
								"shows"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The genre with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Update shows of a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n   {\r\n        \"id\": \"{{show_id}}\",\r\n        \"name\": \"My Hero Academia\",\r\n        \"poster\": \"https://m.media-amazon.com/images/M/MV5BMTMwMDM4N2EtOTJiYy00OTQ0LThlZDYtYWUwOWFlY2IxZGVjXkEyXkFqcGdeQXVyNjAwNDUxODI@._V1_FMjpg_UX1000_.jpg\"\r\n   }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/genres/{{genre_id}}/shows",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genre_id}}",
						"shows"
					]
				}
			},
			"response": [
				{
					"name": "Update shows of a genre",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"{{show_id_2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/genres/{{genre_id}}/shows",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{genre_id}}",
								"shows"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"156e5816-5d71-44cb-b2cd-fed86992246e\",\n    \"nameEN\": \"Drama\",\n    \"nameES\": \"Drama\",\n    \"nameFR\": \"Drame\",\n    \"shows\": [\n        {\n            \"id\": \"10f3310a-dd50-4296-bea1-bff8f5845239\",\n            \"name\": \"My Hero Academia\",\n            \"poster\": \"https://m.media-amazon.com/images/M/MV5BMTMwMDM4N2EtOTJiYy00OTQ0LThlZDYtYWUwOWFlY2IxZGVjXkEyXkFqcGdeQXVyNjAwNDUxODI@._V1_FMjpg_UX1000_.jpg\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Update invalid shows of a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The show with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/genres/{{genre_id}}/shows",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genre_id}}",
						"shows"
					]
				}
			},
			"response": [
				{
					"name": "Update invalid shows of a genre",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/genres/{{genre_id}}/shows",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{genre_id}}",
								"shows"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The show with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Update shows of an invalid genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The genre with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{invalid_id}}/shows",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{invalid_id}}",
						"shows"
					]
				}
			},
			"response": [
				{
					"name": "Update shows of an invalid genre",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"{{show_id_2}}\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/genres/{{invalid_id}}/shows",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{invalid_id}}",
								"shows"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The genre with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a show of a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"   pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{show_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genre_id}}",
						"shows",
						"{{show_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a show of a genre",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{show_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{genre_id}}",
								"shows",
								"{{show_id}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete a show of an invalid genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The genre with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{invalid_id}}/shows/{{show_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{invalid_id}}",
						"shows",
						"{{show_id_2}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a show of an invalid genre",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{invalid_id}}/shows/{{show_id_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{invalid_id}}",
								"shows",
								"{{show_id_2}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete an invalid show of a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The show with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{invalid_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genre_id}}",
						"shows",
						"{{invalid_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete an invalid show of a genre",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{invalid_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{genre_id}}",
								"shows",
								"{{invalid_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The show with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a show non-associated to a genre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The show with the given id is not associated to the genre\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{api_user_id}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{show_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"genres",
						"{{genre_id}}",
						"shows",
						"{{show_id_2}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a show non-associated to a genre",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/genres/{{genre_id}}/shows/{{show_id_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres",
								"{{genre_id}}",
								"shows",
								"{{show_id_2}}"
							]
						}
					},
					"status": "Precondition Failed",
					"code": 412,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The show with the given id is not associated to the genre\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:3000/api/v1"
		},
		{
			"key": "invalid_id",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		},
		{
			"key": "show_id_2",
			"value": "63830d72-6189-4653-9a87-deb775469726",
			"type": "string"
		}
	]
}